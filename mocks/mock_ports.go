// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go
//
// Generated by this command:
//
//	mockgen -source=ports.go -destination=../mocks/mock_ports.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	ports "github.com/radugaf/PlentyTelemetry/ports"
	gomock "go.uber.org/mock/gomock"
)

// MockLoggingService is a mock of LoggingService interface.
type MockLoggingService struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingServiceMockRecorder
	isgomock struct{}
}

// MockLoggingServiceMockRecorder is the mock recorder for MockLoggingService.
type MockLoggingServiceMockRecorder struct {
	mock *MockLoggingService
}

// NewMockLoggingService creates a new mock instance.
func NewMockLoggingService(ctrl *gomock.Controller) *MockLoggingService {
	mock := &MockLoggingService{ctrl: ctrl}
	mock.recorder = &MockLoggingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggingService) EXPECT() *MockLoggingServiceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggingService) Debug(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggingServiceMockRecorder) Debug(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggingService)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLoggingService) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggingServiceMockRecorder) Error(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggingService)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLoggingService) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggingServiceMockRecorder) Info(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggingService)(nil).Info), varargs...)
}

// Log mocks base method.
func (m *MockLoggingService) Log(level ports.LogLevel, msg string, tags map[string]string, txID ...string) {
	m.ctrl.T.Helper()
	varargs := []any{level, msg, tags}
	for _, a := range txID {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockLoggingServiceMockRecorder) Log(level, msg, tags any, txID ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{level, msg, tags}, txID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLoggingService)(nil).Log), varargs...)
}

// StartTransaction mocks base method.
func (m *MockLoggingService) StartTransaction() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction")
	ret0, _ := ret[0].(string)
	return ret0
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockLoggingServiceMockRecorder) StartTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockLoggingService)(nil).StartTransaction))
}

// Warning mocks base method.
func (m *MockLoggingService) Warning(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warning", varargs...)
}

// Warning indicates an expected call of Warning.
func (mr *MockLoggingServiceMockRecorder) Warning(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockLoggingService)(nil).Warning), varargs...)
}

// MockLogWriter is a mock of LogWriter interface.
type MockLogWriter struct {
	ctrl     *gomock.Controller
	recorder *MockLogWriterMockRecorder
	isgomock struct{}
}

// MockLogWriterMockRecorder is the mock recorder for MockLogWriter.
type MockLogWriterMockRecorder struct {
	mock *MockLogWriter
}

// NewMockLogWriter creates a new mock instance.
func NewMockLogWriter(ctrl *gomock.Controller) *MockLogWriter {
	mock := &MockLogWriter{ctrl: ctrl}
	mock.recorder = &MockLogWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogWriter) EXPECT() *MockLogWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockLogWriter) Write(entry ports.LogEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", entry)
}

// Write indicates an expected call of Write.
func (mr *MockLogWriterMockRecorder) Write(entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockLogWriter)(nil).Write), entry)
}
